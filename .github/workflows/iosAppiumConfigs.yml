name: IOS workflow
on:
  workflow_call:
    inputs:
      appium_port:
        required: true
        type: string
      test_config:
        required: true
        type: string
      test_name:
        required: true
        type: string

jobs:
  iOS-Job:
    runs-on: macos-latest

    steps:
#      - name: Download artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ClonedRepository
#          path: GoSELL-Automation
#
#      - name: Switch to another branch
#        run: |
#          cd GoSELL-Automation
#          git checkout GoSELL-Thang

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node.js Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-macos
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Appium
        run: npm install -g appium

      - name: Set APPIUM_HOME environment variable
        run: echo "APPIUM_HOME=$(npm root -g)/appium" >> $GITHUB_ENV

      - name: Verify APPIUM_HOME
        run: echo "APPIUM_HOME is set to $APPIUM_HOME"

      - name: Install Xcode command-line tools
        run: xcode-select --install || true

#      - name: Install FFmpeg
#        run: brew install ffmpeg

#      - name: Verify FFmpeg Installation
#        run: ffmpeg -version

      - name: Install Carthage
        run: brew install carthage

      - name: Save Homebrew Cache
        if: steps.homebrew-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: /usr/local/Homebrew
          key: ${{ runner.os }}-brew-macos

      - name: Check available Xcode versions
        run: ls /Applications/

      - name: Set Xcode version
        run: sudo xcode-select --switch /Applications/Xcode.app

      - name: Check Runtime list
        run: xcrun simctl list runtimes

      - name: Start iOS Simulator
        id: start_simulator
        run: |
          DEVICE_UDID=$(xcrun simctl create "iPhone-13" com.apple.CoreSimulator.SimDeviceType.iPhone-13 com.apple.CoreSimulator.SimRuntime.iOS-17-0)
          xcrun simctl boot $DEVICE_UDID
          echo "SIMULATOR_UDID=$DEVICE_UDID" >> $GITHUB_ENV
          echo "The iOS Simulator UDID is $DEVICE_UDID"

      - name: Get list simulator
        run: xcrun simctl list

      - name: Start Appium server
        run: |
          appium driver install xcuitest
          appium driver doctor xcuitest
          nohup appium -a 0.0.0.0 -p ${{ inputs.appium_port }} -pa /wd/hub > appium_log.txt 2>&1 &
          tail -f appium_log.txt &
        

      - name: Verify WebDriverAgent Directory
        run: |
          cd $APPIUM_HOME/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent
          ls -l

      - name: Run WebDriverAgent Tests
        run: |
          cd $APPIUM_HOME/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent
          xcodebuild -project WebDriverAgent.xcodeproj \
          -scheme WebDriverAgentRunner \
          -destination 'id=$SIMULATOR_UDID' \
          clean build test > wda_log.txt 2>&1 || (tail -n 100 wda_log.txt; exit 1)
    
          echo "WebDriverAgent build and test logs:"
          cat wda_log.txt

      - name: Read WDA log
        if: always()
        run: cat wda_log.txt

#      - name: Install dependencies
#        run: |
#          cd GoSELL-Automation
#          mvn install -DskipTests "-DsuiteFile=${{ inputs.test_config }}" "-DudidIOS=$SIMULATOR_UDID" "-DappiumPort=${{ inputs.appium_port }}"
#
#      - name: Run Tests
#        run: |
#          cd GoSELL-Automation
#          mvn clean install test "-DsuiteFile=${{ inputs.test_config }}" "-DudidIOS=$SIMULATOR_UDID" "-DappiumPort=${{ inputs.appium_port }}"

      - name: Read appium log
        if: always()
        run: cat appium_log.txt

#      - name: Upload all recording .mp4 files
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ inputs.test_name }} - MP4 Files
#          path: '**/*.mp4'
#
#      - name: Upload Test Report
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ inputs.test_name }} - Test Reports
#          path: |
#            **/html/index.html
#            **/reportng.css
#            **/reportng.js
#            **/suite*_test*_results.html

#      - name: Remove cloned repo
#        if: always()
#        run: |
#          rm -r GoSELL-Automation

